class t{static async get(t){const e=await fetch(t,{mode:"cors"});if(e.status<400)return await e.json();throw e}static async put(t,e={}){const a=await fetch(t,{method:"PUT",body:JSON.stringify(e),mode:"cors",headers:{"Content-type":"application/json; charset=UTF-8"}});if(a.status<400)return await a.json();throw a}}const e=t=>`https://jsonplaceholder.typicode.com/posts/${t}`;class a{static async handleError(t){console.error(t);const e=t.status>=400&&t.status<500?"Not found, unknown id":"Server error, try again";return`\n      <div class="${t.status<500&&"display-6"} text-danger">\n        ${e}\n      </div>\n    `}}const s=t=>{const e=document.createElement("div");e.className="col-4 mb-2";const a=document.createElement("div");a.className="card",a.dataset.id=t.id;const s=document.createElement("div");s.className="card-header",s.innerHTML=`<b>Id: ${t.id}</b>`;const n=document.createElement("div");n.className="card-body",n.innerHTML=`\n          <h5 class="card-title">${t.title}</h5>\n            <label class="card-title-label mb-2">\n            Ttile:\n              <textarea class="card-title-textarea form-control">${t.title}</textarea>\n            </label>\n          <p class="user-id">\n            User Id: ${t.userId}\n          </p>\n          <label class="user-id-label mb-2">\n          User Id:\n            <input class="user-id-input form-control" type="text" value="${t.userId}">\n          </label>\n          <p class="card-text card-content">${t.body}</p>\n          <div class="text-center spinner">\n            <div class="spinner-grow text-primary" role="status">\n              <span class="visually-hidden">Loading...</span>\n            </div>\n          </div>\n          <textarea class="body-textarea form-control mb-2">${t.body}</textarea>\n          `;const r=document.createElement("button");r.className="btn btn-primary",r.innerHTML="Change post",r.addEventListener("click",(function(){this.closest(".card").classList.add("edit")}));const c=document.createElement("button");return c.className="btn btn-success",c.innerHTML="Edit post",c.addEventListener("click",i.updatePost),n.append(r,c),a.append(s,n),e.append(a),e},n=document.querySelector(".main-list"),r=document.querySelector(".spinner-block"),c=document.querySelector("input[name=post_id]");class i{static async getAllPosts(){n.innerHTML="";try{r.classList.add("active");const e=await t.get("https://jsonplaceholder.typicode.com/posts");for(const t of e)n.append(s(t))}catch(t){const e=await a.handleError(t);n.innerHTML=e}finally{r.classList.remove("active")}}static async getPostById(){const i=document.querySelector(".invalid-feedback");if(c.classList.remove("is-invalid"),i.innerHTML="",!c.value.trim())return c.classList.add("is-invalid"),void(i.innerHTML="Enter post id");const d=c.value.trim();n.innerHTML="",c.value="";try{r.classList.add("active");const a=await t.get(e(d));n.append(s(a))}catch(t){const e=await a.handleError(t);n.innerHTML=e}finally{r.classList.remove("active")}}static async updatePost(s){const n=s.target.closest(".card"),r=n.dataset.id,c=n.querySelector(".card-title-textarea"),i=n.querySelector(".body-textarea"),d=n.querySelector(".user-id-input");try{n.classList.add("load");const a=await t.put(e(r),{id:r,title:c.value.trim(),body:i.value.trim(),userId:d.value.trim()}),{body:s,userId:o,title:l}=a;n.querySelector(".card-content").innerHTML=s,n.querySelector(".user-id").innerHTML=`User Id: ${o}`,d.value=o,n.querySelector(".card-title").innerHTML=l,c.value=l}catch(t){const e=await a.handleError(t);userId.insertAdjacentHTML("afterend",e)}finally{n.classList.remove("edit"),n.classList.remove("load")}}}const d=document.querySelector(".getAll"),o=document.querySelector(".getById");document.addEventListener("DOMContentLoaded",(()=>{d.addEventListener("click",i.getAllPosts),o.addEventListener("click",i.getPostById)}));